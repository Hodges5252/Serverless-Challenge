org: ethancreativeworks
app: serverless-challenge
service: Serverless-Challenge

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    BUDGET_TABLE: ${self:service}-budgetTable-${sls:stage}
    RECORDS_TABLE: ${self:service}-recordsTable-${sls:stage}
    NODE_ENV: ${self:custom.stageConfig.${sls:stage}.NODE_ENV}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:UpdateItem'
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-budgetTable-${sls:stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-recordsTable-${sls:stage}

functions:
  createBudget:
    handler: handlers/budgetsHandler.createBudget
    events:
      - http:
          path: budget
          method: post

  readBudget:
    handler: handlers/budgetsHandler.readBudget
    events:
      - http:
          path: budget/{budgetId}
          method: get

  updateBudget:
    handler: handlers/budgetsHandler.updateBudget
    events:
      - http:
          path: budget/{budgetId}
          method: put

  deleteBudget:
    handler: handlers/budgetsHandler.deleteBudget
    events:
      - http:
          path: budget/{budgetId}
          method: delete

  createRecord:
    handler: handlers/recordsHandler.createRecord
    events:
      - http:
          path: records
          method: post

  readRecord:
    handler: handlers/recordsHandler.readRecord
    events:
      - http:
          path: records
          method: get
          request:
            parameters:
              querystrings:
                budgetId: true
                startDate: false
                endDate: false

  updateRecord:
    handler: handlers/recordsHandler.updateRecord
    events:
      - http:
          path: records/{recordId}
          method: put

  deleteRecord:
    handler: handlers/recordsHandler.deleteRecord
    events:
      - http:
          path: records/{recordId}
          method: delete


resources:
  Resources:
    BudgetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-budgetTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: budgetId
            AttributeType: S
        KeySchema:
          - AttributeName: budgetId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-recordsTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: recordId
            AttributeType: S
          - AttributeName: budgetId
            AttributeType: S
        KeySchema:
          - AttributeName: recordId
            KeyType: HASH
          - AttributeName: budgetId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

custom:
  stageConfig:
    dev:
      NODE_ENV: development
    prod:
      NODE_ENV: production